var result : int
var N : int
var printed : bool

fun main() : void = {
    N = 8;
    printed = false;
    result = {
        queens(^positions, 0);
    } where {
        var positions : [8]int
    };
    putInt(result);
    putChar(10);
}

fun printBoard(positions : ^[8]int) : void = {
    j = 0;
    while j < 2 * N + 1 do {
        putChar(('-' : int));
        j = j + 1;
    };
    putChar(10);

    i = 0;
    while i < N do {
        j = 0;
        putChar(('|' : int));
        while j < N do {
            if positions^[j] == i then
                putChar(('X' : int))
            else
                putChar((' ' : int));
            putChar(('|' : int));
            j = j + 1;
        };
        putChar(10);

        j = 0;
        while j < 2 * N + 1 do {
            putChar(('-' : int));
            j = j + 1;
        };
        putChar(10);

        i = i + 1;
    };

} where {
    var i : int
    var j : int
}

fun queens(positions : ^[8]int, currentQueen : int) : int = {
    if currentQueen == N then {
        # All queens have been placed
        if !printed then {
            printBoard(positions);
            printed = true;
        } else none;
        result = 1;
    } else {
        i = 0;
        result = 0;

        # Try to place queen on all rows
        while i < N do {
            valid = true;
            j = 0;

            # Check if previous queens do not attack the new one
            while j < currentQueen & valid do {
                if queensAttack(j, positions^[j], currentQueen, i) then
                    valid = false
                else
                    valid = true;
                j = j + 1;
            };

            # If queens do not attack themselves, place queens and continue
            if valid then {
                # Place next queen
                positions^[currentQueen] = i;
                result = result + queens(positions, currentQueen + 1);
            } else {
                none;
            };

            # Try next row
            i = i + 1;
        };
    };
    result;
} where {
    var result : int
    var valid : bool
    var i : int
    var j : int
}

fun queensAttack(x1 : int, y1 : int, x2 : int, y2 : int) : bool = {
    {
        if abs(x1 - x2) == 0 | abs(y1 - y2) == 0 | abs(x1 - x2) == abs(y1 - y2) then
            state = true
        else
            state = false;
        state;
    } where {
        var state : bool
    };
}

fun abs(x : int) : int = {
    {
        if x < 0 then
            result = -x
        else
            result = x;
        result;
    } where {
        var result : int
    };
}

fun putInt(x : int) : void = {
	if x < 0
	then {
		x = -x;
		putChar(('-' : int));
	}
	else none;
	if x/10 > 0
	then putInt(x/10)
	else none;
	putChar(x%10 + ('0': int));
}
fun putChar(c : int) : void
