var board : [8][8]bool
var path: [100]Position
var maxLengths : [100]int
var dx : [8]int
var dy : [8]int
var N : int

typ Position = { x : int, y : int }

fun main() : void = {
    N = 4;

    # Initialize board to false
    i = 0;
    while i < N do {
        j = 0;
        while j < N do {
            board[i][j] = false;
            j = j + 1;
        };
        i = i + 1;
    };

    i = 0;
    while i < 100 do {
        maxLengths[i] = 0;
        i = i + 1;
    };

    # Initialize possible moves
    dx[0] = 2; dx[1] = 1; dx[2] = -1; dx[3] = -2;
    dx[4] = -2; dx[5] = -1; dx[6] = 1; dx[7] = 2;
    dy[0] = 1; dy[1] = 2; dy[2] = 2; dy[3] = 1;
    dy[4] = -1; dy[5] = -2; dy[6] = -2; dy[7] = -1;

    putString("Starting position: ");

    # Read starting position
    c = (getChar() : char);
    y = (c : int) - ('A' : int);
    c = (getChar() : char);
    x = (c : int) - ('1' : int);

    result = longestPath(x, y, 0);
    putString("Result: ");
    putInt(result);
    putChar(10);
    putChar(10);
    putString("Path: ");

    i = 0;
    while i < result do {
        putChar(('A' : int) + path[i].x);
        putInt(path[i].y + 1);
        putChar((' ' : int));
        i = i + 1;
    };
    putChar(10);

} where {
    var i : int
    var j : int
    var c : char
    var x : int
    var y : int
    var result : int
}

fun longestPath(x : int, y : int, i : int) : int = {
    # putInt(y); putChar((',' : int)); putInt(x); putChar((',' : int)); putInt(i); putChar(10);
    if i < N * N then {
        # Save previous position at this index
        prevPosition.x = path[i].x;
        prevPosition.y = path[i].y;

        # Add current position to the path and mark it on the board
        path[i].x = x;
        path[i].y = y;
        board[y][x] = true;

        # Check every possible move
        k = 0;
        maxLocalLength = 0;
        while k < 8 do {
            newX = x + dx[k];
            newY = y + dy[k];

            if newX >= 0 & newX < N & newY >= 0 & newY < N then {
                if !board[newY][newX] then {
                    length = longestPath(newX, newY, i + 1);
                    if length > maxLocalLength then {
                        maxLocalLength = length;
                    } else {
                        length = 0;
                    };
                } else {
                    length = 0;
                };
            } else {
                length = 0;
            };

            k = k + 1;
        };
        maxLocalLength = maxLocalLength + 1;

        # Restore old position if we did not found a larger path
        if maxLocalLength < maxLengths[i] then {
            path[i].x = prevPosition.x;
            path[i].y = prevPosition.y;
        } else {
            maxLengths[i] = maxLocalLength;
        };

        board[y][x] = false;

        result = maxLocalLength;
    } else {
        result = 0;
    };
    result;
} where {
    var result : int
    var k : int
    var prevPosition : Position
    var maxLocalLength : int
    var length : int
    var newX : int
    var newY : int
}


fun putStringln(s : ^char) : int = {
	count = putString(s);
	putChar(10);
	count;
} where {
	var count : int
}
fun putString(s : ^char) : int = {
	count = 0;
	x = (s : ^int);
	while x^ != 0 do {
		putChar(x^);
		x = ((x : int) + 8 : ^int);
		count = count + 1;
	};
	count;
} where {
	var x : ^int
	var count : int
}
fun putInt(x : int) : void = {
	if x < 0
	then {
		x = -x;
		putChar(('-' : int));
	}
	else none;
	if x/10 > 0
	then putInt(x/10)
	else none;
	putChar(x%10 + ('0': int));
}
fun putChar(c : int) : void
fun getChar() : int