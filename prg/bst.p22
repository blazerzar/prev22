typ Node = { left : ^Node, right : ^Node, value : int }

fun main() : void = {
    tree = (nil : ^Node);
    input = 'A';

    while input != 'E' do {
        putString("Enter instruction (P - print, I - insert, D - delete, S - search): ");
        input = (getChar() : char);
        putChar(10);

        if input == 'P' then
            print(tree, 0)
        else if input == 'I' then {
            tree = insert(tree, getChar() - ('0' : int));
        } else if input == 'D' then {
            tree = delete(tree, getChar() - ('0' : int));
        } else if input == 'S' then {
            if search(tree, getChar() - ('0' : int)) then
                putChar(('T' : int))
            else
                putChar(('F' : int));
            putChar(10);
        } else if input == 'E' then {
            input = 'E';
        } else {
            input = 'A';
        };
    };


} where {
    var input : char
    var value : int
    var tree : ^Node
}

fun print(tree : ^Node, indent : int) : void = {
    if tree != (nil : ^Node) then {
        print(tree^.right, indent + 2);
        i = 0;
        while i < indent do {
            putChar((' ' : int));
            i = i + 1;
        };
        putInt(tree^.value);
        putChar(10);
        print(tree^.left, indent + 2);
    } else none;
} where {
    var i : int
}

fun insert(tree : ^Node, value : int) : ^Node = {
    if tree == (nil : ^Node) then {
        result = (new 24 : ^Node);
        result^.right = (nil : ^Node);
        result^.left = (nil : ^Node);
        result^.value = value;
    } else if value < tree^.value then {
        tree^.left = insert(tree^.left, value);
        result = tree;
    } else {
        tree^.right = insert(tree^.right, value);
        result = tree;
    };
    result;
} where {
    var result : ^Node
}

fun delete(tree : ^Node, value : int) : ^Node = {
    if tree == (nil : ^Node) then
        none
    else if tree^.value == value then {
        if tree^.left == (nil : ^Node) then {
            temp = tree;
            tree = tree^.right;
            del temp;
        } else if tree^.right == (nil : ^Node) then {
            temp = tree;
            tree = tree^.left;
            del temp;
        } else {
            tree^.left = deleteLargest(tree^.left);
            tree^.value = largest;
        };
    } else if value < tree^.value then
        tree^.left = delete(tree^.left, value)
    else
        tree^.right = delete(tree^.right, value);
    tree;
} where {
    var temp : ^Node
    var largest : int
    fun deleteLargest(tree : ^Node) : ^Node = {
        if tree^.right == (nil : ^Node) then {
            largest = tree^.value;
            temp = tree^.right;
            tree = tree^.left;
            del temp;
        } else {
            tree^.right = deleteLargest(tree^.right);
        };
        tree;
    } where {
        var temp : ^Node
    }
}



fun search(tree : ^Node, value : int) : bool = {
    if tree == (nil : ^Node) then
        result = false
    else if tree^.value == value then
        result = true
    else if value < tree^.value then
        result = search(tree^.left, value)
    else
        result = search(tree^.right, value);
    result;
} where {
    var result : bool
}

fun putStringln(s : ^char) : int = {
	count = putString(s);
	newLine();
	count;
} where {
	var count : int
}
fun putString(s : ^char) : int = {
	count = 0;
	x = (s : ^int);
	while x^ != 0 do {
		putChar(x^);
		x = ((x : int) + 8 : ^int);
		count = count + 1;
	};
	count;
} where {
	var x : ^int
	var count : int
}
fun newLine() : void = putChar(10)
fun putInt(x : int) : void = {
	if x < 0
	then {
		x = -x;
		putChar(('-' : int));
	}
	else none;
	if x/10 > 0
	then putInt(x/10)
	else none;
	putChar(x%10 + ('0': int));
}
fun putChar(c : int) : void
fun getChar() : int